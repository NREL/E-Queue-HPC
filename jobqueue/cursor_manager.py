import sys
from typing import Any, Dict, Optional

import psycopg

from jobqueue.connect import connect, release_pooled_connection
from jobqueue.connection_manager import ConnectionManager


class CursorManager:
    """
    Context Manager wrapping a psycopg cursor and connection.
    Makes sure to close the cursor and release the connection, or return it
    to a connection pool when the manager's scope exits.
    Passes along any exception, or exceptions generated by closing the
    cursor or connection.

    Will prioritize raising the original exception over exceptions generated
    by closing the cursor or connection.
    """

    def __init__(
        self, credentials: Dict[str, Any], **kwargs  # database connection settings
    ):
        self._connection_manager: ConnectionManager = ConnectionManager(
            credentials, **kwargs
        )
        self._kwargs: Dict[str, Any] = kwargs
        self._cursor: Optional[psycopg.Cursor] = None

    def __enter__(self) -> psycopg.Cursor:  # type: ignore
        try:
            connection = self._connection_manager.__enter__()
            self._cursor = connection.cursor(**self._kwargs)
            return self._cursor
        except Exception as e:
            if not self.__exit__(*sys.exc_info()):
                raise e

    def __exit__(
        self,
        exception_type,
        exception_value,
        traceback,
    ) -> bool:
        exception = exception_value

        def do_and_capture(func):
            nonlocal exception
            try:
                func()
            except Exception as e:
                if exception is None:
                    exception = e

        cursor = self._cursor
        if cursor is not None and not cursor.closed:
            do_and_capture(lambda: cursor.close())

        do_and_capture(
            lambda :
            self._connection_manager.__exit__(
                exception_type,
                exception_value,
                traceback,
            )
        )

        if exception is not None:
            raise exception
        return False
