import sys
from typing import Any, Dict, Optional

import psycopg

from jobqueue.connect import connect, release_pooled_connection


class ConnectionManager:
    """
    Connection Manager wrapping a psycopg  connection.
    Makes sure to release the connection, or return it
    to a connection pool when the manager's scope exits.
    Passes along any exception, or exceptions generated by closing the
    cursor or connection.

    Will prioritize raising the original exception over exceptions generated
    by closing the cursor or connection.
    """

    def __init__(
        self,
        credentials: Dict[str, Any],  # database connection settings
        autocommit:bool = True,
    ):
        self._credentials: Dict[str, Any] = credentials
        self._connection: Optional[psycopg.Connection] = None
        self._pooling: bool = False
        self._autocommit:bool = autocommit

    def __enter__(self) -> psycopg.Connection: # type: ignore
        try:
            self._pooling = self._credentials.get("pooling", False)
            connection = connect(self._credentials, autocommit=self._autocommit)
            self._connection = connection
            return self._connection
        except Exception as e:
            if not self.__exit__(*sys.exc_info()):
                raise e

    def __exit__(
        self,
        exception_type,
        exception_value,
        traceback,
    ) -> bool:
        exception = exception_value

        def do_and_capture(func):
            nonlocal exception
            try:
                func()
            except Exception as e:
                if exception is None:
                    exception = e

        connection = self._connection
        if connection is not None:
            if self._pooling:
                do_and_capture(
                    lambda: release_pooled_connection(self._credentials, connection)
                )
            else:
                do_and_capture(lambda: connection.close())

        if exception is not None:
            raise exception
        return False
